<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>Types</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>

<body>

<nav>
    <a href='https://n2o.space'>ECO</a>
    <a href='https://o3.click'>O3</a>
    <a href='../index.html'>N2O</a>
</nav>

<header>
    <a href="../index.html"><img src="https://o3.click/o3.svg"></a>
    <h1>TYPES</h1>
</header>

<main>
    <section>

<h3>INTRO</h3>

<p>The <b>Network.N2O.Types</b> module contains context definition, state and N2O monad.</p>

    </section>
    <section>

<h3>CONTEXT</h3>

<figure><figcaption>Listing 1. N2O Context</figcaption><code>
  data Cx (f :: * -> *) (a :: *) (b :: *)
     = Cx
     { cxHandler :: W a -> N2O f a b b
     , cxReq :: Req
     , cxMiddleware :: [Cx f a b -> Cx f a b]
     , cxDePickle :: BL.ByteString -> Maybe a
     , cxPickle :: a -> BL.ByteString
     , cxProtos :: [Proto f a b]
     , cxEncoder :: Encoder b
     , cxDecoder :: Decoder (f a)
     , cxState :: Map BS.ByteString BL.ByteString
     }

</code></figure>

    </section>
    <section>
<h3>STATE</h3>

<figure><figcaption>Listing 2. N2O State</figcaption><code>
  type N2OState (f :: * -> *) (a :: *) (b :: *) = IORef (Cx f a b)

</code></figure>

    </section>

    <section>
<h3>MONAD</h3>

<figure><figcaption>Listing 2. N2O Monad</figcaption><code>
  type N2O (f :: * -> *) (a :: *) (b :: *) = N2OM (N2OState f a b) IO

  newtype  N2OM state m a = N2OM { runN2O :: state -> m a }

  instance Functor m     => Functor     (N2OM state m)
  instance Applicative m => Applicative (N2OM state m)
  instance Monad m       => Monad       (N2OM state m)

</code></figure>

<h4>lift :: m a -> N2OM state m a</h4>
<h4>ask :: (Monad m) => N2OM state m state</h4>
<h4>put :: (B.Binary bin) => BS.ByteString -> bin -> N2O f a b ()</h4>
<h4>get :: (B.Binary bin) => BS.ByteString -> N2O f a b (Maybe bin)</h4>

    </section>
    <section>
<h3>PROTO</h3>

<p><b>Return</b> formalize Erlang return protocol,
   <b>Msg</b> relates to WebSocket streaming,
   <b>Proto</b> is protocol handler.</p>

<figure><figcaption>Listing 1. N2O PROTO</figcaption><code>
  data Return
     = Reply Msg
     | Ok
     | Unknown deriving (Show, Eq)

  data Proto (f :: * -> *) (a :: *) (b :: *)
     = Proto { protoInfo :: f a -> N2O f a b Return }

  data Msg
     = MsgTxt TL.Text
     | MsgBin BL.ByteString
     | MsgInit BL.ByteString
     | MsgTerminate deriving (Show, Eq)

</code></figure>

    </section>

    <section>

<p>This module may refer to:
<a href="types.htm">INTERNAL</a></b>,
<a href="core.htm">CORE</a></b>
</p>

    </section>
</main>

<footer>
    Made with <span class="heart">‚ù§</span> to Haskell and N2O
</footer>

</body>
</html>
