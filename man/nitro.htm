<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>NITRO</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>

<body>

<nav>
    <!--a href='https://synrc.space/'>SYNRC</a-->
    <a href='https://n2o.space'>N2O</a>
    <a href='https://haskell.n2o.space'>HASKELL</a>
</nav>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>NITRO</h1>
</header>

<main>
    <section>

<h3>INTRO</h3>

<p>The <b>Network.N2O.Nitro</b> module contains events, actions and elements rendering.</p>

    </section>
    <section>

<h3>EVENT</h3>

<figure><figcaption>Listing 1. Nitro Event</figcaption><code>
    data Event a = Event
      { eventTarget   :: String
      , eventPostback :: a
      , eventType     :: String
      , eventSource   :: [String]
      } deriving (Show, Generic)

</code></figure>

<h4>renderEvent :: Event a -> N2O f a b BL.ByteString</h4>


    </section>
    <section>

<h3>ACTION</h3>

<figure><figcaption>Listing 1. Nitro Actions</figcaption><code>
  data Action a = AEvent (Event a)
                | AElement (Element a)
                | ARaw BL.ByteString deriving (Show, Generic)

</code></figure>

<h4>renderAction :: Action a -> N2O f a b BL.ByteString</h4>
<h4>wire :: forall f a b. (B.Binary a) => Action a -> N2O f a b BL.ByteString</h4>
<h4>wireEl :: (B.Binary a) => Element a -> N2O f a b BL.ByteString</h4>
<h4>getActions :: (B.Binary a) => N2O f a b [Action a]</h4>
<h4>putActions :: (B.Binary a) => [Action a] -> N2O f a b ()</h4>

    </section>
    <section>

<h3>ELEMENT</h3>

<figure><figcaption>Listing 1. Nitro Element</figcaption><code>
  baseElement = Element
              { id = ""
              , name = undefined
              , postback = undefined
              , body = []
              , source = []
              , noBody = False
              , noClosing = False
              }

       button = baseElement
              { name = "button"
              , source = []
              }

        panel = baseElement
              { name = "div" }

</code></figure>

<h4>renderElement :: (B.Binary a) => Element a -> N2O f a b BL.ByteString</h4>

    </section>
    <section>

<p>This module may refer to:
<a href="types.htm">TYPES</a></b>,
<a href="core.htm">CORE</a></b>
</p>

    </section>
</main>

<footer>
    Made with <span class="heart">‚ù§</span> for Haskell and N2O
</footer>

</body>
</html>
